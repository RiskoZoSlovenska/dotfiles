#!/bin/sh
# Risko's RC file
# Copy to ~/.riskorc and then run from the shell's RC file


# Colours
export COLORTERM=truecolor
export MICRO_TRUECOLOR=1


# PATH additions
PATH="$PATH:$HOME/.local/bin"
PATH="$PATH:$HOME/.local/sbin"


# ZSH shell options
# See https://zsh.sourceforge.io/Doc/Release/Options.html
if [ -n "$ZSH_NAME" ]; then
	setopt EXTENDED_GLOB
	setopt CORRECT  # Offer corrections
	setopt NO_CORRECT_ALL  # Only offer corrections for the command name
	setopt HIST_IGNORE_ALL_DUPS  # Deduplicate the history
fi


# Pager
if pager="$(command -v most)"; then
	export PAGER="$pager"
	export SYSTEMD_PAGER="$pager +s"
	export SYSTEMD_PAGERSECURE=true
fi


# Editor
if micro="$(command -v micro)"; then
	export EDITOR="$micro"
fi


# ZSH plugin settings
if [ -n "$ZSH_NAME" ]; then
	# Set zsh-autocomplete settings
	zstyle ':autocomplete:*' list-lines 8
	zstyle ':autocomplete:*' delay 0.1
fi


# 3rd-party env variables
export OLLAMA_NOHISTORY=1


# Keybind stuff
stty -ixon # https://superuser.com/a/473051

# https://github.com/marlonrichert/zsh-autocomplete#reset-history-key-bindings-to-zsh-default
# shellcheck disable=all
if [ -n "$ZSH_NAME" ]; then
	# Sane Ctrl + Backspace
	bindkey '^H' backward-kill-word

	# Change zsh-autocomplete Tab behaviour to cycle options
	bindkey '\t' menu-select "$terminfo[kcbt]" menu-select
	bindkey -M menuselect '\t' menu-complete "$terminfo[kcbt]" reverse-menu-complete

	# Revert zsh-autocomplete vertical arrows
	local -a prefix=( '\e'{\[,O} )
	local -a up=( ${^prefix}A ) down=( ${^prefix}B )
	local key=
	for key in $up[@]; do
		bindkey "$key" up-line-or-history
	done
	for key in $down[@]; do
		bindkey "$key" down-line-or-history
	done
fi


# Aliases
alias la='ls -A'
alias ll='ls -lh'
alias lla='ll -A'
alias where='command -V'
alias rawclip='xclip -selection clipboard'
alias clip='tee /dev/tty | rawclip'
alias epath='echo $PATH'
alias refresh='exec $SHELL'
alias grep='grep --color=auto'
alias cgrep='grep --color=always'
alias pyserver='py -m http.server'
alias ping8='ping 8.8.8.8'
alias ping1='ping 1.1.1.1'
alias pingg='ping google.com'
alias pubip='curl https://ipinfo.io/ip'

alias ffmpeg='ffmpeg -hide_banner'
alias ffprobe='ffprobe -hide_banner'
alias base64='base64 --wrap=0'
alias trash='trash --verbose'

alias python='python3'
alias py='python'
alias pypy='pypy3'
alias pip='pip3'
alias ppip='pypy -m pip'

alias lur='luarocks'
alias luri='lur install'
alias lurr='lur remove'
alias lurl='lur list'
alias lurm='lur make'
alias lurt='lur test'
alias lurmt='lur make && lur test'

alias lcur='luaver current'
alias luse51='luaver use 5.1.5'
alias luse52='luaver use 5.2.4'
alias luse53='luaver use 5.3.6'
alias luse54='luaver use 5.4.4'

alias wgup='sudo wg-quick up wg0'
alias wgdown='sudo wg-quick down wg0'

alias gls='git log --graph --all --pretty=format:"%C(auto)%h%d%Creset %<|(-48,trunc)%s    %C(#a0a0a0)%as (%ar)%>|(-16)%-%an%Creset"'

# Functions
riskohelp() {
	cat << EOM
Hi future me, here's a list of things your custom configuration adds, in case
you've forgotten:
  * la, ll and lla aliases
  * epath alias to echo the current \$PATH
  * pyserver alias to start http server
  * ping8, ping1 and pingg aliases to ping 8.8.8.8, 1.1.1.1 and google.com
  * pubip alias to fetch the current public IP
  * clip and rawclip aliases to pipe stdout to your clipboard (requires xclip)
      (rawclip just pipes, clip copies and pipes)
  * cgrep alias to grep with forced color
  * gls alias for nice git graphs
  * wgup and wgdown aliases for wireguard (defaults to wg0)
  * refresh alias to exec the current shell
  * luarocks aliases (lur, luri, etc.)
  * luaver aliases (lcur, luse51, etc.)
  * The riskohelp function, which... well, which you just used.
  * The addtopath function
      Takes a string and appends it to a guessed RC file. Also exec's
      your \$SHELL so you don't have to.
  * The erc function
      Opens RC files in code/micro/nano. No arg for .riskorc, 'b' for .bashrc,
	  'ba' for .bash_aliases or 'z' for .zshrc.
  * Other aliases to run various commands with friendlier default options
EOM
}

addtopath() {
	if [ "$1" = "--help" ]; then riskohelp; fi

	if [ -n "$ZSH_NAME" ]; then
		pathsfile=~/.zshrc
	elif [ -n "$BASH" ]; then
		pathsfile=~/.bashrc
	else
		echo >&2 "cannot find file to which append PATH expansion statement"
		return 1
	fi

	echo "Appending to $pathsfile and exec'ing $SHELL..."
	echo "PATH=\"\$PATH:$1\"" >> "$pathsfile"
	exec "$SHELL"
}

erc() {
	case $1 in
	--help|-h)
		riskohelp
		return 0
		;;
	'')
		file=~/.riskorc
		;;
	b)
		file=~/.bashrc
		;;
	ba)
		file=~/.bash_aliases
		;;
	z)
		file=~/.zshrc
		;;
	*)
		echo "unknown option '$1'"
		return 1
		;;
	esac

	if ! [ -f "$file" ]; then
		echo >&2 "file '$file' does not exist" 
		return 1
	fi

	if command -v code > /dev/null; then
		code "$file"
	elif command -v micro > /dev/null; then
		micro "$file"
	else
		nano "$file"
	fi
}
